//////////////////////////////////////////////////////////////////////
#ifndef __BSLIB_UTILITY_FUNCTION_H__
#define __BSLIB_UTILITY_FUNCTION_H__

#include <BSLib/utility/baseDef.h>

#define BSLIB_UTILITY_FUNCTION_TEMPLATE_0 typename R=void
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_1 BSLIB_UTILITY_FUNCTION_TEMPLATE_0, typename T1=void
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_2 BSLIB_UTILITY_FUNCTION_TEMPLATE_1, typename T2=void
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_3 BSLIB_UTILITY_FUNCTION_TEMPLATE_2, typename T3=void
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_4 BSLIB_UTILITY_FUNCTION_TEMPLATE_3, typename T4=void
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_5 BSLIB_UTILITY_FUNCTION_TEMPLATE_4, typename T5=void
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_6 BSLIB_UTILITY_FUNCTION_TEMPLATE_5, typename T6=void
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_7 BSLIB_UTILITY_FUNCTION_TEMPLATE_6, typename T7=void
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_8 BSLIB_UTILITY_FUNCTION_TEMPLATE_7, typename T8=void
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_9 BSLIB_UTILITY_FUNCTION_TEMPLATE_8, typename T9=void

#define BSLIB_UTILITY_FUNCTION_TYPE_PARA_0
#define BSLIB_UTILITY_FUNCTION_TYPE_PARA_1 T1 p1
#define BSLIB_UTILITY_FUNCTION_TYPE_PARA_2 BSLIB_UTILITY_FUNCTION_TYPE_PARA_1, T2 p2
#define BSLIB_UTILITY_FUNCTION_TYPE_PARA_3 BSLIB_UTILITY_FUNCTION_TYPE_PARA_2, T3 p3
#define BSLIB_UTILITY_FUNCTION_TYPE_PARA_4 BSLIB_UTILITY_FUNCTION_TYPE_PARA_3, T4 p4
#define BSLIB_UTILITY_FUNCTION_TYPE_PARA_5 BSLIB_UTILITY_FUNCTION_TYPE_PARA_4, T5 p5
#define BSLIB_UTILITY_FUNCTION_TYPE_PARA_6 BSLIB_UTILITY_FUNCTION_TYPE_PARA_5, T6 p6
#define BSLIB_UTILITY_FUNCTION_TYPE_PARA_7 BSLIB_UTILITY_FUNCTION_TYPE_PARA_6, T7 p7
#define BSLIB_UTILITY_FUNCTION_TYPE_PARA_8 BSLIB_UTILITY_FUNCTION_TYPE_PARA_7, T8 p8
#define BSLIB_UTILITY_FUNCTION_TYPE_PARA_9 BSLIB_UTILITY_FUNCTION_TYPE_PARA_8, T9 p9

#define BSLIB_UTILITY_FUNCTION_TYPE_0
#define BSLIB_UTILITY_FUNCTION_TYPE_1 T1
#define BSLIB_UTILITY_FUNCTION_TYPE_2 BSLIB_UTILITY_FUNCTION_TYPE_1, T2
#define BSLIB_UTILITY_FUNCTION_TYPE_3 BSLIB_UTILITY_FUNCTION_TYPE_2, T3
#define BSLIB_UTILITY_FUNCTION_TYPE_4 BSLIB_UTILITY_FUNCTION_TYPE_3, T4
#define BSLIB_UTILITY_FUNCTION_TYPE_5 BSLIB_UTILITY_FUNCTION_TYPE_4, T5
#define BSLIB_UTILITY_FUNCTION_TYPE_6 BSLIB_UTILITY_FUNCTION_TYPE_5, T6
#define BSLIB_UTILITY_FUNCTION_TYPE_7 BSLIB_UTILITY_FUNCTION_TYPE_6, T7
#define BSLIB_UTILITY_FUNCTION_TYPE_8 BSLIB_UTILITY_FUNCTION_TYPE_7, T8
#define BSLIB_UTILITY_FUNCTION_TYPE_9 BSLIB_UTILITY_FUNCTION_TYPE_8, T9

#define BSLIB_UTILITY_FUNCTION_PARA_0
#define BSLIB_UTILITY_FUNCTION_PARA_1 p1
#define BSLIB_UTILITY_FUNCTION_PARA_2 BSLIB_UTILITY_FUNCTION_PARA_1, p2
#define BSLIB_UTILITY_FUNCTION_PARA_3 BSLIB_UTILITY_FUNCTION_PARA_2, p3
#define BSLIB_UTILITY_FUNCTION_PARA_4 BSLIB_UTILITY_FUNCTION_PARA_3, p4
#define BSLIB_UTILITY_FUNCTION_PARA_5 BSLIB_UTILITY_FUNCTION_PARA_4, p5
#define BSLIB_UTILITY_FUNCTION_PARA_6 BSLIB_UTILITY_FUNCTION_PARA_5, p6
#define BSLIB_UTILITY_FUNCTION_PARA_7 BSLIB_UTILITY_FUNCTION_PARA_6, p7
#define BSLIB_UTILITY_FUNCTION_PARA_8 BSLIB_UTILITY_FUNCTION_PARA_7, p8
#define BSLIB_UTILITY_FUNCTION_PARA_9 BSLIB_UTILITY_FUNCTION_PARA_8, p9

#define BSLIB_UTILITY_FUNCTION(N)\
	template<BSLIB_UTILITY_FUNCTION_TEMPLATE_##N>\
	class CFunction\
	{\
	public:\
		typedef R(*FType)(BSLIB_UTILITY_FUNCTION_TYPE_##N);\
	protected:\
		CFunction() : m_fun(NULL) {}\
	public:\
		CFunction(FType fun) : m_fun(fun) {}\
		CFunction(CFunction& obj) : m_fun(obj.m_fun) {}\
		CFunction& operator =(CFunction& obj)\
		{\
			m_fun = obj.m_fun;\
			return *this;\
		}\
		virtual R operator()(BSLIB_UTILITY_FUNCTION_TYPE_PARA_##N) const\
		{\
			return m_fun(BSLIB_UTILITY_FUNCTION_PARA_##N);\
		}\
		virtual CFunction* clone() const\
		{\
			return new CFunction(m_fun);\
		}\
		virtual bool isValid()const \
		{\
			return m_fun != NULL;\
		}\
	private:\
		FType m_fun;\
	};

#define BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_0	typename R
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_1	BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_0, typename T1
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_2	BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_1, typename T2
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_3	BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_2, typename T3
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_4	BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_3, typename T4
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_5	BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_4, typename T5
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_6	BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_5, typename T6
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_7	BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_6, typename T7
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_8	BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_7, typename T8
#define	BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_9	BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_8, typename T9

#define BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_0	R
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_1	BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_0, T1
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_2	BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_1, T2
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_3	BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_2, T3
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_4	BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_3, T4
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_5	BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_4, T5
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_6	BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_5, T6
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_7	BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_6, T7
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_8	BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_7, T8
#define BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_9	BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_8, T9

#define BSLIB_UTILITY_FUNCTION_SPECIAL(N)\
	template<BSLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_##N>\
	class CFunction<BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_##N>\
	{\
	public:\
		typedef R(*FType)(BSLIB_UTILITY_FUNCTION_TYPE_##N);\
	protected:\
		CFunction() : m_fun(NULL) {}\
	public:\
		CFunction(FType fun) : m_fun(fun) {}\
		CFunction(CFunction& obj) : m_fun(obj.m_fun) {}\
		CFunction& operator =(CFunction& obj)\
		{\
			m_fun = obj.m_fun;\
			return *this;\
		}\
		virtual R operator()(BSLIB_UTILITY_FUNCTION_TYPE_PARA_##N) const\
		{\
			return m_fun(BSLIB_UTILITY_FUNCTION_PARA_##N);\
		}\
		virtual CFunction* clone() const\
		{\
			return new CFunction(m_fun);\
		}\
		virtual bool isValid()const \
		{\
			return m_fun != NULL;\
		}\
	private:\
		FType m_fun;\
	};

#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_0	typename R, typename C
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_1	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_0, typename T1=void
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_2	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_1, typename T2=void
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_3	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_2, typename T3=void
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_4	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_3, typename T4=void
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_5	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_4, typename T5=void
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_6	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_5, typename T6=void
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_7	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_6, typename T7=void
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_8	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_7, typename T8=void
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_9	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_8, typename T9=void

#define BSLIB_UTILITY_FUNCTION_OBJECT(N)\
	template<BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_##N>\
	class CFunctionObject : public CFunction<BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_##N>\
	{\
	public:\
		typedef R(C::*FType)(BSLIB_UTILITY_FUNCTION_TYPE_##N);\
	public:\
		CFunctionObject() : m_objfun(NULL), m_obj(NULL) {}\
		CFunctionObject(FType fun, C* obj) : m_objfun(fun), m_obj(obj) {}\
		CFunctionObject(CFunctionObject& obj) : m_objfun(obj.m_objfun), m_obj(obj.m_obj) {}\
		CFunctionObject& operator =(CFunctionObject& obj)\
		{\
			m_objfun = obj.m_objfun;\
			m_obj = obj.m_obj;\
			return *this;\
		}\
		virtual R operator()(BSLIB_UTILITY_FUNCTION_TYPE_PARA_##N) const \
		{\
			return (*m_obj.*m_objfun)(BSLIB_UTILITY_FUNCTION_PARA_##N);\
		}\
		virtual CFunction<BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_##N>* clone() const\
		{\
			return new CFunctionObject(m_objfun, m_obj);\
		}\
		virtual bool isValid() const\
		{\
			return m_objfun != NULL && m_obj != NULL;\
		}\
	private:\
		FType m_objfun;\
		C* m_obj;\
	};

#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_0	typename R, typename C
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_1	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_0, typename T1
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_2	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_1, typename T2
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_3	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_2, typename T3
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_4	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_3, typename T4
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_5	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_4, typename T5
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_6	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_5, typename T6
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_7	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_6, typename T7
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_8	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_7, typename T8
#define	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_9	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_8, typename T9

#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_0	R, C
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_1	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_0, T1
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_2	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_1, T2
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_3	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_2, T3
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_4	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_3, T4
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_5	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_4, T5
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_6	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_5, T6
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_7	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_6, T7
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_8	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_7, T8
#define BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_9	BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_8, T9

#define BSLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(N)\
	template<BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_##N>\
	class CFunctionObject<BSLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_##N> : public CFunction<BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_##N>\
	{\
	public:\
		typedef R(C::*FType)(BSLIB_UTILITY_FUNCTION_TYPE_##N);\
	public:\
		CFunctionObject() : m_objfun(NULL), m_obj(NULL) {}\
		CFunctionObject(FType fun, C* obj) : m_objfun(fun), m_obj(obj) {}\
		CFunctionObject(CFunctionObject& obj) : m_objfun(obj.m_objfun), m_obj(obj.m_obj) {}\
		CFunctionObject& operator =(CFunctionObject& obj)\
		{\
			m_objfun = obj.m_objfun;\
			m_obj = obj.m_obj;\
			return *this;\
		}\
		virtual R operator()(BSLIB_UTILITY_FUNCTION_TYPE_PARA_##N) const\
		{\
			return (*m_obj.*m_objfun)(BSLIB_UTILITY_FUNCTION_PARA_##N);\
		}\
		virtual CFunction<BSLIB_UTILITY_FUNCTION_TEMPLATE_PARA_##N>* clone() const\
		{\
			return new CFunctionObject(m_objfun, m_obj);\
		}\
		virtual bool isValid() const\
		{\
			return m_objfun != NULL && m_obj != NULL;\
		}\
	private:\
		FType m_objfun;\
		C* m_obj;\
	};

namespace BSLib
{

namespace Utility
{

BSLIB_UTILITY_FUNCTION(9);

BSLIB_UTILITY_FUNCTION_SPECIAL(0);
BSLIB_UTILITY_FUNCTION_SPECIAL(1);
BSLIB_UTILITY_FUNCTION_SPECIAL(2);
BSLIB_UTILITY_FUNCTION_SPECIAL(3);
BSLIB_UTILITY_FUNCTION_SPECIAL(4);
BSLIB_UTILITY_FUNCTION_SPECIAL(5);
BSLIB_UTILITY_FUNCTION_SPECIAL(6);
BSLIB_UTILITY_FUNCTION_SPECIAL(7);
BSLIB_UTILITY_FUNCTION_SPECIAL(8);

BSLIB_UTILITY_FUNCTION_OBJECT(9);

BSLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(0);
BSLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(1);
BSLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(2);
BSLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(3);
BSLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(4);
BSLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(5);
BSLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(6);
BSLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(7);
BSLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(8);

template <typename R, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> class CFunction;
template <typename R, typename C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> class CFunctionObject;

	
}//Utility

}//BSLib

#endif//__BSLIB_UTILITY_FUNCTION_H__

