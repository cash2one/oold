#ifndef __GSLIB_PLAYERSYSTEM_MSGNUMIDPLAYERSYSTEM_H__
#define __GSLIB_PLAYERSYSTEM_MSGNUMIDPLAYERSYSTEM_H__

#include <GFLib/commonServer/message/message.h>
#include <GSLib/funType.h>
#include <GSLib/serverType.h>
#include <GSLib/baseDef.h>

namespace GSLib
{

namespace PlayerSystem
{
//////////////////////////////////////////////////////////////////////////
enum EMsgNumIDPlayerSystem
{
	// GC<====>GM:1-200
	//EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_TEST = 1,
	//EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_TEST = 2,

    EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_PLAYERDATA = 3,
	EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_PLAYERDATA = 4,

	EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_CREATE_ROLE = 5,
	EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_CREATE_ROLE = 6,

	EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_SELECT_ROLE = 7,
    EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_SELECT_ROLE = 8,

	//EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_ENTER_SCENE = 9,
	//EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_ENTER_SCENE = 10,

	//EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_QUIT_SCENE = 11,
	//EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_QUIT_SCENE = 12,

	//EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_UPDATE_ATTRIBUTE = 13,
	//EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_UPDATE_ATTRIBUTE = 14,

	EMSGNUMID_PLAYERSYSTEM_GM2GC_NTF_INIT_ROLEDATA = 15,
	EMSGNUMID_PLAYERSYSTEM_GM2GC_NTF_INIT_BAGDATA = 16,

	EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_SOLDITEM_BAGDATA = 17,
	EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_SOLDITEM_BAGDATA = 18,

    EMSGNUMID_PLAYERSYSTEM_GM2GC_NTF_EXPAND_BAGSIZE = 19,
	EMSGNUMID_PLAYERSYSTEM_GM2GC_NTF_UPDATEITEM_BAGDATA = 20,

	EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_USEITEM_BAGDATA = 21,
	EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_USEITEM_BAGDATA = 22,

	EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_ROLE_QUIT = 23,
	EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_ROLE_QUIT = 24,

    EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_DELETE_ROLE = 25,
    EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_DELETE_ROLE = 26,

    EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_GET_ROLEDATA = 27,
    EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_GET_ROLEDATA = 28,

    EMSGNUMID_PLAYERSYSTEM_GM2GC_NTF_ADD_ROLEBUF = 29,
    
	EMSGNUMID_PLAYERSYSTEM_GM2GC_NTF_UPDATE_UINT32ATTRIBUTE = 32,
	EMSGNUMID_PLAYERSYSTEM_GM2GC_NTF_UPDATE_UINT64ATTRIBUTE = 34,

	EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_UPDATE_SKILLPOINT = 35,
	EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_UPDATE_SKILLPOINT = 36,

    EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_GET_VIPLEVELGIFT = 37,
    EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_GET_VIPLEVELGIFT = 38,

    EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_VIPLEVELGIFT_STATUS = 39,
    EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_VIPLEVELGIFT_STATUS = 40,

    EMSGNUMID_PLAYERSYSTEM_GM2GC_NTF_UPDATE_PLAYERVIPSCORE = 41,
    EMSGNUMID_PLAYERSYSTEM_GM2GC_NTF_UPDATE_ROLE_BATTLEATTRIBUTE = 42,

    EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_GETBAGDATA = 43,
    EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_GETBAGDATA = 44,

    EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_GET_VITALITY = 45,
    EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_GET_VITALITY = 46,

    EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_BUY_VITALITY = 47,
    EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_BUY_VITALITY = 48,

    EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_GET_BUY_VITALITY_DIAMOND = 49,
    EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_GET_BUY_VITALITY_DIAMOND = 50,

	EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_PURCHASE_GOLD = 51,
	EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_PURCHASE_GOLD = 52,

	EMSGNUMID_PLAYERSYSTEM_GC2GM_REQ_GET_PURCHASE_GOLD_INFO = 53,
	EMSGNUMID_PLAYERSYSTEM_GM2GC_ACK_GET_PURCHASE_GOLD_INFO = 54,

	EMSGNUMID_PLAYERSYSTEM_DB2GM_NTF_CHARGE_LIST = 55,

	// GM<=====>CN:201-400
	EMSGNUMID_PLAYERSYSTEM_GM2CN_REQ_CREATE_ROLE = 201,
    EMSGNUMID_PLAYERSYSTEM_CN2GM_ACK_CREATE_ROLE = 202,
	EMSGNUMID_PLAYERSYSTEM_GM2CN_REQ_INIT_PLAYERDATA = 203,
	EMSGNUMID_PLAYERSYSTEM_CN2GM_ACK_INIT_PLAYERDATA = 204,
	EMSGNUMID_PLAYERSYSTEM_GM2CN_REQ_SELECT_ROLE = 205,
	EMSGNUMID_PLAYERSYSTEM_CN2GM_ACK_SELECT_ROLE = 206,
    EMSGNUMID_PLAYERSYSTEM_GM2CN_REQ_ROLE_QUIT = 207,
	EMSGNUMID_PLAYERSYSTEM_CN2GM_ACK_ROLE_QUIT = 208,
    EMSGNUMID_PLAYERSYSTEM_GM2CN_REQ_GET_ROLEDATA = 209,
    EMSGNUMID_PLAYERSYSTEM_CN2GM_ACK_GET_ROLEDATA = 210,
    EMSGNUMID_PLAYERSYSTEM_GM2CN_NTF_UPDATE_ROLEDATA = 211,
};

enum EInitRoleListResult
{
  EINITPLAYERDATA_RESULT_SUCCESS = 0,
  EINITPLAYERDATA_RESULT_FAIL = 1,
};

enum ECreateRoleResult
{
	ECREATEROLE_RESULT_SUCCESS = 0,
	ECREATEROLE_RESULT_FAIL = 1,
    ECREATEROLE_RESULT_INVALID_PROTYPE = 2,
    ECREATEROLE_RESULT_INVALID_ROLENAME = 3,
    ECREATEROLE_RESULT_COUNT_LIMIT = 4,
};

enum ESelectRoleResult
{
	ESELECTROLE_RESULT_SUCCESS = 0,
	ESELECTROLE_RESULT_FAIL = 1,
};

enum EInitRoleDataResult
{
    EINITROLEDATA_RESULT_SUCCESS = 0,
    EINITROLEDATA_RESULT_FAIL = 1,
};

enum EGetRoleDataResult
{
    EGETROLEDATA_RESULT_SUCCESS = 0,
    EGETROLEDATA_RESULT_FAIL = 1,
};

enum EEnterSceneResult
{
	EENTERSCENE_RESULT_SUCCESS = 0,
	EENTERSCENE_RESULT_FAIL = 1,
};

enum EQuitSceneResult
{
	EQUITSCENE_RESULT_SUCCESS = 0,
	EQUITSCENE_RESULT_FAIL = 1,
};

enum EUpdateAttributeReason
{
	EUPDATEATTRIBUTE_REASON_NORMAL= 0,     // 普通更新
	UPDATEATTRIBUTE_REASON_FAIL = 1,
};

enum EInitBagDataResult
{
	EINITBAGDATA_RESULT_SUCCESS = 0,
	EINITBAGDATA_RESULT_FAIL = 1,
};

enum ESoldBagDataResult
{
	ESOLDBAGITEMDATA_RESULT_SUCCESS = 0,
	ESOLDBAGITEMDATA_RESULT_FAIL = 1,
};

enum EUpdateBagDataResult
{
	EUPDATEBAGITEMDATA_RESULT_SUCCESS = 0,
	EUPDATEBAGITEMDATA_RESULT_FAIL = 1,
};

enum EUseBagItemDataResult
{
	EUSEBAGITEMDATA_RESULT_SUCCESS = 0,
	EUSEBAGITEMDATA_RESULT_FAIL = 1,
};

enum EUpdateSkillPointResult
{
	EUPDATESKILLPOINT_RESULT_SUCCESS = 0,
	EUPDATESKILLPOINT_RESULT_FAIL = 1,
};

enum ERoleQuitResult
{
	EROLEQUIT_RESULT_SUCCESS = 0,
	EROLEQUIT_RESULT_FAIL = 1,
};

enum EDeleteRoleResult
{
    EDELETEROLE_RESULT_SUCCESS = 0,
    EDELETEROLE_RESULT_FAIL = 1,
};

enum EGetVipLevelGiftResult
{
    EGETVIPLEVELGIFT_RESULT_SUCCESS = 0,
    EGETVIPLEVELGIFT_RESULT_FAIL = 1,
};

enum EVipLevelGiftStatusResult
{
    EVIPLEVEL_GIFT_STATUS_RESULT_SUCCESS = 0,
    EVIPLEVEL_GIFT_STATUS_RESULT_FAIL = 1,
};

enum EGetVipGiftStatus
{
    EGETVIPGIFT_STATUS_YES = 0,
    EGETVIPGIFT_STATUS_NO = 1,
};


/// <summary>
/// 获取体力
/// </summary>
enum EGetVitalityResult
{
    EGETVITALITY_RESULT_SUCCESS = 0,
    EGETVITALITY_RESULT_FAIL = 1,
};

/// <summary>
/// 购买体力
/// </summary>
enum EBuyVitalityResult
{
    EBUYVITALITY_RESULT_SUCCESS = 0,
    EBUYVITALITY_RESULT_FAIL = 1,
    EBUYVITALITY_RESULT_BUYTIMES_LIMIT = 2,
    EBUYVITALITY_RESULT_DIAMOND_LIMIT = 3,
};

/// <summary>
/// 获取购买体力所需钻石
/// </summary>
enum EGetNeedDiamondResult
{
    EGETNEEDDIAMOND_RESULT_SUCCESS = 0,
    EGETNEEDDIAMOND_RESULT_FAIL = 1,
};

enum EPurchaseGoldResult
{
	EPURCHASE_GOLD_RESULT_SUCCESS = 0,
	EPURCHASE_GOLD_RESULT_FAIL,
	EPURCHASE_GOLD_RESULT_LIMIT_TIMES,
	EPURCHASE_GOLD_RESULT_NOT_ENOUGH_DIAMOND,
};

enum EGetPurchaseGoldInfoResult
{
	EGET_PURCHASE_GOLD_INFO_RESULT_SUCCESS = 0,
	EGET_PURCHASE_GOLD_INFO_RESULT_FAIL,

};














}//PlayerSystem

}//GSLib

#endif//__GSLIB_PLAYERSYSTEM_MSGNUMIDPLAYERSYSTEM_H__

