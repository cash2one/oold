#ifndef __GSLIB_EQUIPSYSTEM_MSGNUMIDEQUIPSYSTEM_H__
#define __GSLIB_EQUIPSYSTEM_MSGNUMIDEQUIPSYSTEM_H__

#include <GFLib/commonServer/message/message.h>
#include <GSLib/funType.h>
#include <GSLib/serverType.h>
#include <GSLib/baseDef.h>

namespace GSLib
{

namespace EquipSystem
{
//////////////////////////////////////////////////////////////////////////
enum EMsgNumIDEquipSystem
{
    // 装备洗练  暂时拿掉
	EMSGNUMID_EQUIPSYSTEM_GC2GM_REQ_RESETATTR = 1,
	EMSGNUMID_EQUIPSYSTEM_GM2GC_ACK_RESETATTR = 2,

    // 初始化装备
    EMSGNUMID_EQUIPSYSTEM_GC2GM_REQ_GET_ROLEEQUIP = 3,     
	EMSGNUMID_EQUIPSYSTEM_GM2GC_ACK_GET_ROLEEQUIP = 4,

	// 装备升级装备
	EMSGNUMID_EQUIPSYSTEM_GC2GM_REQ_UPGRADE_LEVEL = 5,     
	EMSGNUMID_EQUIPSYSTEM_GM2GC_ACK_UPGRADE_LEVEL = 6,

	// 熔炼装备 // !过时
	EMSGNUMID_EQUIPSYSTEM_GC2GM_REQ_UPGRADE_QUALITY = 7,     
	EMSGNUMID_EQUIPSYSTEM_GM2GC_ACK_UPGRADE_QUALITY = 8,
    
	// 宝石升级
	EMSGNUMID_EQUIPSYSTEM_GC2GM_REQ_GEM_COMBINE = 9,
	EMSGNUMID_EQUIPSYSTEM_GM2GC_ACK_GEM_COMBINE = 10,
    
	EMSGNUMID_EQUIPSYSTEM_GM2GC_NTF_ROLEEQUIPDATA_UPDATE = 11,
    // 装备脱穿
    EMSGNUMID_EQUIPSYSTEM_GC2GM_REQ_CHANGE_EQUIPSTATUS = 13,
    EMSGNUMID_EQUIPSYSTEM_GM2GC_ACK_CHANGE_EQUIPSTATUS = 14,
	// 装备获取
    EMSGNUMID_EQUIPSYSTEM_GC2GM_REQ_EQUIP_DATA = 15,
    EMSGNUMID_EQUIPSYSTEM_GM2GC_ACK_EQUIP_DATA = 16,
	// 获取强化条件
    EMSGNUMID_EQUIPSYSTEM_GC2GM_REQ_CONDITION = 17,
    EMSGNUMID_EQUIPSYSTEM_GM2GC_ACK_CONDITION = 18,
	
	// !过时
    EMSGNUMID_EQUIPSYSTEM_GC2GM_REQ_SAVEOPERATION = 19,
    EMSGNUMID_EQUIPSYSTEM_GM2GC_ACK_SAVEOPERATION = 20,
	//宝石镶嵌
    EMSGNUMID_EQUIPSYSTEM_GC2GM_REQ_CHANGE_GEM_STATUS = 21,
    EMSGNUMID_EQUIPSYSTEM_GM2GC_ACK_CHANGE_GEM_STATUS = 22,
	//获取强化之后装备的属性(显示之用)	
    EMSGNUMID_EQUIPSYSTEM_GC2GM_REQ_NEXT_ADDLEVEL_EQUIPSTATUS = 23, 
    EMSGNUMID_EQUIPSYSTEM_GM2GC_ACK_NEXT_ADDLEVEL_EQUIPSTATUS = 24,
	//装备拆解
    EMSGNUMID_EQUIPSYSTEM_GC2GM_REQ_DISASSEMBLY_EQUIP = 25,
    EMSGNUMID_EQUIPSYSTEM_GM2GC_ACK_DISASSEMBLY_EQUIP = 26,
	//获取拆解结果(显示之用)
    EMSGNUMID_EQUIPSYSTEM_GC2GM_REQ_GET_DISASSEMBLY_EQUIP_RESULT = 27,
    EMSGNUMID_EQUIPSYSTEM_GM2GC_ACK_GET_DISASSEMBLY_EQUIP_RESULT = 28,
};

enum ESaveOperationResult
{
    ESAVEOPERATION_RESULT_SUCCESS = 0,
    ESAVEOPERATION_RESULT_FAIL = 1,
};

enum EInitEquipDataResult
{
  EINITEQUIPDATA_RESULT_SUCCESS = 0,
  EINITEQUIPDATA_RESULT_FAIL = 1,
};

enum EEquipDataResult
{
    EEQUIPDATA_RESULT_SUCCESS = 0,
    EEQUIPDATA_RESULT_FAIL = 1,
};

enum EConditionResult
{
    ECONDITION_RESULT_SUCCESS = 0,
    ECONDITION_RESULT_FAIL = 1,
};

enum EUpdateEquipDataResult
{
	EUPDATEEQUIPDATA_RESULT_SUCCESS = 0,
	EUPDATEEQUIPDATA_RESULT_FAIL = 1,
};

enum EGetNextAddLevelEquipResult
{
    EGETEQUIP_RESULT_SUCCESS = 0,
    EGETEQUIP_RESULT_FAIL = 1,
    EGETEQUIP_RESULT_EQUIP_NOT_EXIST=2,  //无效装备ID
};

enum EDisassemblyEquipResult
{
    EDISASSEMBLYEQUIP_RESULT_SUCCESS = 0,
    EDISASSEMBLYEQUIP_RESULT_FAIL = 1,
    EDISASSEMBLYEQUIP_RESULT_EQUIP_NOT_EXIST = 2,      //无效装备ID
    EDISASSEMBLYEQUIP_RESULT_NOT_ENOUGH_BAGSPACE = 3,  // 背包空间不足够
};

enum EGetDisassemblyEquipResult
{
    EGETDISASSEMBLYEQUIP_RESULT_SUCCESS = 0,
    EGETDISASSEMBLYEQUIP_RESULT_FAIL = 1,
    EGETDISASSEMBLYEQUIP_RESULT_EQUIP_NOT_EXIST = 2,      //无效装备ID
};

enum EUpgradeLevelResult
{
	EUPGRADELEVEL_RESULT_SUCCESS = 0,
	EUPGRADELEVEL_RESULT_FAIL = 1,
	EUPGRADELEVEL_RESULT_GOLD_LIMIT=2,   //金币不足
	EUPGRADELEVEL_RESULT_EQUIP_NOT_EXIST=3,  //无效装备ID
	EUPGRADELEVEL_RESULT_LEVEL_LIMIT=4,      //超出强化等级
	EUPGRADELEVEL_RESULT_METARIAL_LIMIT=5,   //材料不足
	EUPGRADELEVEL_RESULT_ROLELEVEL_LIMIT=6,  //超出角色等级
};

enum EUpgradeQualityResult
{
	EUPGRATEQUALITY_EEQUIPRESUlT_SUCCESS = 0,
	EUPGRATEQUALITY_EEQUIPRESUlT_FAIL = 1,
    EUPGRATEQUALITY_RESULT_GOLD_LIMIT=2,       //金币不足
    EUPGRATEQUALITY_RESULT_EQUIP_NOT_EXIST=3,  //无效装备ID
    EUPGRATEQUALITY_RESULT_QUALITY_LIMIT=4,    //超出品质等级
    EUPGRATEQUALITY_RESULT_METARIAL_LIMIT=5,   //材料不足
   
};

/// <summary>
/// 装备洗练
/// </summary>
enum EResetAttrResult
{
    ERESETATTR_RESULT_SUCCESS = 0,
    ERESETATTR_RESULT_FAIL = 1,
    ERESETATTR_RESULT_GOLD_LIMIT=2,         //金币不足
    ERESETATTR_RESULT_EQUIP_NOT_EXIST=3,    //无效装备ID
    ERESETATTR_RESULT_DIAMOND_LIMIT=4,      //宝石不足
    ERESETATTR_RESULT_LOCK_COUNT_LIMIT=5,   //超出锁定上限
};

/// <summary>
/// 换装 
/// </summary>
enum EChangeStatusResult
{
    ECHANGESTATUS_RESULT_SUCCESS = 0,
    ECHANGESTATUS_RESULT_FAIL = 1,
    ECHANGESTATUS_RESULT_STATUS_ERROR = 2,    // 装备已穿在身上
    ECHANGESTATUS_RESULT_STATUS_BAGFULL = 3,  // 背包已满
    ECHANGESTATUS_RESULT_STATUS_NOT_INBAG = 4,  // 不在背包
    ECHANGESTATUS_RESULT_INVALID_EQUIP_PROTYPE = 5,  // 无效的职业类型
    ECHANGESTATUS_RESULT_ROLE_LEVEL_LIMIT = 6,  // 角色等级限制 
};

/// <summary>
/// 宝石镶嵌操作结果
/// </summary>
enum EGemUpdateStatusResult
{
    EGEM_UPDATESTATUS_RESULT_FAIL = 0,
    EGEM_UPDATESTATUS_RESULT_SUCCESS = 1,
    EGEM_UPDATESTATUS_RESULT_EQUIP_NOT_EXIST = 2,       // 无效的装备
    EGEM_UPDATESTATUS_RESULT_INVALID_SLOT_INDEX = 3,    // 无效的槽位
    EGEM_UPDATESTATUS_RESULT_GEM_EXIST = 4,             // 当前位置已经镶嵌宝石
    EGEM_UPDATESTATUS_RESULT_NOT_ENOUGH_GEM = 5,        // 背包中不存在宝石
    EGEM_UPDATESTATUS_RESULT_GEM_NOT_INSLOT = 6,        // 宝石不在镶嵌槽中
    EGEM_UPDATESTATUS_RESULT_BAGFULL = 7,               // 背包已满
};

/// <summary>
/// 宝石升级
/// </summary>
enum EGemCombineResult
{
    EGEM_COMBINE_RESULT_SUCCESS = 0,
    EGEM_COMBINE_RESULT_FAIL = 1,
    EGEM_COMBINE_RESULT_METARIAL_LIMIT = 2,   // 宝石不足
    EGEM_COMBINE_RESULT_INVALID_GEMTPID = 3,   // 宝石TPID无效（无配置或配置类型错误）
};

enum EReqEquipType
{
    REQ_EQUIP_ON = 0,          // 装备穿上
    REQ_EQUIP_OFF =1,          // 装备脱下
    REQ_EQUIP_ALL = 2,          // 装备穿上
};


enum EResetEquipType
{
    ERESET_EQUIP_TYPE_XILIAN = 0,           // 洗练
    ERESET_EQUIP_TYPE_ZHUANYI = 1,          // 转移
};


}//EquipSystem

}//GSLib

#endif//__GSLIB_EQUIPSYSTEM_MSGNUMIDEQUIPSYSTEM_H__

